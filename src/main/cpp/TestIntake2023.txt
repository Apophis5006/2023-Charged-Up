/*----------------------------------------------------------------------------*/
/* Copyright (c) 2018 FIRST. All Rights Reserved.                             */
/* Open Source Software - may be modified and shared by FRC teams. The code   */
/* must be accompanied by the FIRST BSD license file in the root directory of */
/* the project.                                                               */
/*----------------------------------------------------------------------------*/
//#define CALSWERVE  //Move all gears to left side of robot and then read the Zero values for table
#define CAMERA
//#define LIME

#include <stdio.h>
#include <frc/Joystick.h>
#include <frc/DigitalInput.h>
#include <frc/TimedRobot.h>
#include <frc/Timer.h>
#include "ctre/Phoenix.h"
#include <opencv2/core/core.hpp>
#include <opencv2/core/types.hpp>
#include <opencv2/imgproc/imgproc.hpp>
#include <thread>
#include "networktables/NetworkTable.h"
#include "networktables/NetworkTableInstance.h"
#include <vector>

#include <frc/PneumaticsControlModule.h>
#include <frc/Solenoid.h>
#include <frc/smartdashboard/SmartDashboard.h>

#include "frc/DriverStation.h"
#ifdef CAMERA
#include <cameraserver/CameraServer.h>
#endif


#define TIMEOUT 10
#define NOTIMEOUT 0
#define TRUE 1
#define FALSE 0

int Initialized = 0;

//phematic motor
int RotaryVal = 0;
double TimeVal = 0.25;
int TankFull = 0;

//Joystick defines
#define DIR 0
#define ROT 1
#define ARM 2



#define PI 3.141592654
#define ENCODER_RES_FL 4096 //4179.0 //4156.0 //4180.0
#define ENCODER_RES_RL 4096 //4152.0 //4185.0 //4180.0
#define ENCODER_RES_FR 4096//4154.0 //4076.0 //4180.0
#define ENCODER_RES_RR 4096 //4162.0 //4175.0 //4180.0

#define PVALUE 0.15
#define DVALUE 0.0
#define IVALUE 0.0



int UpdateCount=0;    //counter to slow screen update so it does not take too many CPU cycles
double RobotAngle=0.0;
double GyroOffset=0.0;
int EncoderAct = 0;        //storage for actual angles of wheel from motor controller encoder feedback

                    //local variable for determining best way(least delta degrees) to meet rotatioanl target
//AHRS *ahrs;  //gyro

//#define ARM_TIME  .25_s



class Robot : public frc::TimedRobot
{
public:
    void RobotInit(void);
    
 
 
    int gUpdateCount = 0; ///counter to be sure we only update drive screen every once in a while so it does not bog down the network
    void UpdateDriverScreen(void) //` fix later to display what you actually want
    {
        char str[40];
   

        if (gUpdateCount <= 0)
        {
            gUpdateCount = 25; //delay between displays to not bog down system
   
           //Code for displaying swerve values
         sprintf(str,"Encoder:%d",SRX_Motor.GetSensorCollection().GetPulseWidthPosition(),(4096/360.0));
         frc::SmartDashboard::PutString("DB/String 0",str);
          sprintf(str,"Gyro:%4.2f",RobotAngle);
         frc::SmartDashboard::PutString("DB/String 1",str);
		   
          
		 //  frc::SmartDashboard::PutNumber("DB/LED 0",light);
          // frc::SmartDashboard::PutNumber("DB/LED 1",Shooter_On);

        }
        gUpdateCount--;
    } // End UpdateDriverScreen
	
     

    void ReadGyro(void) {
		//RobotAngle = ahrs->GetYaw()-GyroOffset;
        
        //RobotPitch = ahrs->GetPitch();
	}	// End ReadyGyro
	void ResetGyro(void) {
		//ahrs->ZeroYaw();
        //GyroOffset=ahrs->GetYaw();
	}	// End ResetGyro

 
void AutonomousPeriodic() override
    {
   
        UpdateDriverScreen();
        
    }

    void TeleopPeriodic() override
    {

        if (!Initialized)
        {
            RobotInit(); 
            Initialized=1;
        }
        /*if(Arm_Stick.GetRawButton(2))  Falcon_Motor.Set(ControlMode::PercentOutput,0.2);
        else Falcon_Motor.Set(ControlMode::PercentOutput,0.0);

        if(Arm_Stick.GetRawButton(3))  Rotary.Set(1);
        else  Rotary.Set(0);

        if(Arm_Stick.GetRawButton(4)) ResetGyro();
        


        //if(PCM.GetPressureSwitch()) TankFull = 1; 

        if(IntakeTimer.HasElapsed(units::time::second_t(TimeVal))){
            TimeVal += 0.2;
            if(RotaryVal == 0) RotaryVal = 1;
            else RotaryVal = 0;
            
        }
        //`if(PCM.GetPressureSwitch())Rotary.Set(RotaryVal);
    */

      
        EncoderAct=SRX_Motor.GetSensorCollection().GetPulseWidthPosition();

        double percentOutput = Dir_Stick.GetX();
        double percentRight = (Dir_Stick.GetY()/2)+.5;
        SRX_Motor.Set(ControlMode::PercentOutput,(percentOutput * percentRight));
        SRX_Motor2.Set(ControlMode::PercentOutput,(percentOutput * (1.0 - percentRight)));
        ReadGyro(); 
        




        UpdateDriverScreen(); 

    }

private:

    frc::Joystick Rot_Stick{ROT};
    frc::Joystick Dir_Stick{DIR};
    frc::Joystick Arm_Stick{ARM};

    TalonFX Falcon_Motor = {0};
    TalonSRX SRX_Motor = {1};
    TalonSRX SRX_Motor2 = {5};
   

    frc::Solenoid Rotary{frc::PneumaticsModuleType::CTREPCM,0}; //0 is a rotating pnuematic "motor"
    frc::Solenoid Linear{frc::PneumaticsModuleType::CTREPCM,1}; //1 is a standard cylinder
    
  
   frc::Timer IntakeTimer;

   // frc::DigitalInput ElevatorBottom{1};      
   
    frc::PneumaticsControlModule PCM;
    

};


#ifndef RUNNING_FRC_TESTS
int main()
{
    return frc::StartRobot<Robot>();
}
#endif

void Robot::RobotInit()
{
    Initialized = 1;
    //ahrs = new AHRS(frc::SPI::Port::kMXP);
    

    IntakeTimer.Start();
    IntakeTimer.Reset();
     
    Falcon_Motor.ConfigNominalOutputForward(0.0f, TIMEOUT);
    Falcon_Motor.ConfigNominalOutputReverse(0.0f, TIMEOUT);
    Falcon_Motor.ConfigPeakOutputForward(+1.0f, TIMEOUT);
    Falcon_Motor.ConfigPeakOutputReverse(-1.0f, TIMEOUT);
    Falcon_Motor.SelectProfileSlot(0, 0);
    Falcon_Motor.Config_kP(0, 0.5, TIMEOUT);
    Falcon_Motor.Config_kI(0, 0.0, TIMEOUT);
    Falcon_Motor.Config_kD(0, 0.0, TIMEOUT);
    Falcon_Motor.Set(ControlMode::PercentOutput, 0.0);

	SRX_Motor.ConfigSelectedFeedbackSensor(FeedbackDevice::PulseWidthEncodedPosition, 0, NOTIMEOUT);
    SRX_Motor.SetSensorPhase(true);
    SRX_Motor.ConfigNominalOutputForward(0.0f, TIMEOUT);
    SRX_Motor.ConfigNominalOutputReverse(0.0f, TIMEOUT);
    SRX_Motor.ConfigPeakOutputForward(+0.5f, TIMEOUT);
    SRX_Motor.ConfigPeakOutputReverse(-0.5f, TIMEOUT);
    SRX_Motor.SelectProfileSlot(0, 0);
    SRX_Motor.Config_kP(0, PVALUE, TIMEOUT);
    SRX_Motor.Config_kI(0, IVALUE, TIMEOUT);
    SRX_Motor.Config_kD(0, DVALUE, TIMEOUT);
    SRX_Motor.Config_kF(0, 0.0, TIMEOUT);
    SRX_Motor.ConfigFeedbackNotContinuous(0,TIMEOUT);
    SRX_Motor.ConfigClosedloopRamp(.3,TIMEOUT);
  
    
    ResetGyro();
    
    //Camera
	#ifdef CAMERA
    frc::CameraServer::StartAutomaticCapture();
    //frc::CameraServer::StartAutomaticCapture(1);
    
    #endif
    //Getting Alliance and location
    //Alliance = frc::DriverStation::GetAlliance();
    //StartingLocation = frc::DriverStation::GetAlliance()*10 + frc::DriverStation::GetLocation();
    //StartingLocation = 0; //frc::SmartDashboard::GetNumber("DB/Slider 0",-1);
    
  
}